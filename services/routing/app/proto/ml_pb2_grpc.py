# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import ml_pb2 as ml__pb2


class EmbeddingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateEmbedding = channel.unary_unary(
                '/ml.EmbeddingService/GenerateEmbedding',
                request_serializer=ml__pb2.EmbeddingRequest.SerializeToString,
                response_deserializer=ml__pb2.EmbeddingResponse.FromString,
                )
        self.GenerateEmbeddingBatch = channel.unary_unary(
                '/ml.EmbeddingService/GenerateEmbeddingBatch',
                request_serializer=ml__pb2.EmbeddingBatchRequest.SerializeToString,
                response_deserializer=ml__pb2.EmbeddingBatchResponse.FromString,
                )
        self.CosineSimilarity = channel.unary_unary(
                '/ml.EmbeddingService/CosineSimilarity',
                request_serializer=ml__pb2.SimilarityRequest.SerializeToString,
                response_deserializer=ml__pb2.SimilarityResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/ml.EmbeddingService/HealthCheck',
                request_serializer=ml__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=ml__pb2.HealthCheckResponse.FromString,
                )


class EmbeddingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GenerateEmbedding(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateEmbeddingBatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CosineSimilarity(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EmbeddingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateEmbedding': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateEmbedding,
                    request_deserializer=ml__pb2.EmbeddingRequest.FromString,
                    response_serializer=ml__pb2.EmbeddingResponse.SerializeToString,
            ),
            'GenerateEmbeddingBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateEmbeddingBatch,
                    request_deserializer=ml__pb2.EmbeddingBatchRequest.FromString,
                    response_serializer=ml__pb2.EmbeddingBatchResponse.SerializeToString,
            ),
            'CosineSimilarity': grpc.unary_unary_rpc_method_handler(
                    servicer.CosineSimilarity,
                    request_deserializer=ml__pb2.SimilarityRequest.FromString,
                    response_serializer=ml__pb2.SimilarityResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=ml__pb2.HealthCheckRequest.FromString,
                    response_serializer=ml__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ml.EmbeddingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EmbeddingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GenerateEmbedding(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml.EmbeddingService/GenerateEmbedding',
            ml__pb2.EmbeddingRequest.SerializeToString,
            ml__pb2.EmbeddingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateEmbeddingBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml.EmbeddingService/GenerateEmbeddingBatch',
            ml__pb2.EmbeddingBatchRequest.SerializeToString,
            ml__pb2.EmbeddingBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CosineSimilarity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml.EmbeddingService/CosineSimilarity',
            ml__pb2.SimilarityRequest.SerializeToString,
            ml__pb2.SimilarityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml.EmbeddingService/HealthCheck',
            ml__pb2.HealthCheckRequest.SerializeToString,
            ml__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
