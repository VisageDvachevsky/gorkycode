# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import routing_pb2 as routing__pb2


class RoutingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OptimizeRoute = channel.unary_unary(
                '/routing.RoutingService/OptimizeRoute',
                request_serializer=routing__pb2.OptimizeRouteRequest.SerializeToString,
                response_deserializer=routing__pb2.OptimizeRouteResponse.FromString,
                )
        self.CalculateRouteGeometry = channel.unary_unary(
                '/routing.RoutingService/CalculateRouteGeometry',
                request_serializer=routing__pb2.RouteGeometryRequest.SerializeToString,
                response_deserializer=routing__pb2.RouteGeometryResponse.FromString,
                )
        self.GetDistanceMatrix = channel.unary_unary(
                '/routing.RoutingService/GetDistanceMatrix',
                request_serializer=routing__pb2.DistanceMatrixRequest.SerializeToString,
                response_deserializer=routing__pb2.DistanceMatrixResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/routing.RoutingService/HealthCheck',
                request_serializer=routing__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=routing__pb2.HealthCheckResponse.FromString,
                )


class RoutingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OptimizeRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalculateRouteGeometry(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistanceMatrix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoutingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OptimizeRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.OptimizeRoute,
                    request_deserializer=routing__pb2.OptimizeRouteRequest.FromString,
                    response_serializer=routing__pb2.OptimizeRouteResponse.SerializeToString,
            ),
            'CalculateRouteGeometry': grpc.unary_unary_rpc_method_handler(
                    servicer.CalculateRouteGeometry,
                    request_deserializer=routing__pb2.RouteGeometryRequest.FromString,
                    response_serializer=routing__pb2.RouteGeometryResponse.SerializeToString,
            ),
            'GetDistanceMatrix': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistanceMatrix,
                    request_deserializer=routing__pb2.DistanceMatrixRequest.FromString,
                    response_serializer=routing__pb2.DistanceMatrixResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=routing__pb2.HealthCheckRequest.FromString,
                    response_serializer=routing__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'routing.RoutingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RoutingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OptimizeRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routing.RoutingService/OptimizeRoute',
            routing__pb2.OptimizeRouteRequest.SerializeToString,
            routing__pb2.OptimizeRouteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalculateRouteGeometry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routing.RoutingService/CalculateRouteGeometry',
            routing__pb2.RouteGeometryRequest.SerializeToString,
            routing__pb2.RouteGeometryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistanceMatrix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routing.RoutingService/GetDistanceMatrix',
            routing__pb2.DistanceMatrixRequest.SerializeToString,
            routing__pb2.DistanceMatrixResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/routing.RoutingService/HealthCheck',
            routing__pb2.HealthCheckRequest.SerializeToString,
            routing__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
