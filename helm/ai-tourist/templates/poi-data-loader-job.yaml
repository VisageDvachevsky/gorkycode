{{- if .Values.postgresql.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ai-tourist.fullname" . }}-poi-loader-script
  labels:
    {{- include "ai-tourist.labels" . | nindent 4 }}
data:
  load_pois.py: |-
{{ .Files.Get "scripts/load_pois.py" | indent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "ai-tourist.fullname" . }}-poi-data
  labels:
    {{- include "ai-tourist.labels" . | nindent 4 }}
data:
  poi.json: |-
{{ .Files.Get "data/poi.json" | indent 4 }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "ai-tourist.fullname" . }}-poi-loader
  labels:
    app: poi-loader
    {{- include "ai-tourist.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      name: {{ include "ai-tourist.fullname" . }}-poi-loader
      labels:
        app: poi-loader
    spec:
      restartPolicy: OnFailure
      initContainers:
      - name: wait-for-migration
        image: postgres:16-alpine
        command:
        - sh
        - -c
        - |
          until psql "postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}" -c "SELECT 1 FROM pois LIMIT 1" 2>/dev/null; do
            echo "Waiting for database migration...";
            sleep 5;
          done;
          echo "Migration complete!";
        env:
        - name: DB_USER
          value: "{{ .Values.postgresql.auth.username }}"
        - name: DB_HOST
          value: {{ include "ai-tourist.fullname" . | printf "%s-postgresql" | quote }}
        - name: DB_PORT
          value: {{ .Values.postgresql.port | quote }}
        - name: DB_NAME
          value: "{{ .Values.postgresql.auth.database }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "ai-tourist.fullname" . }}-secrets
              key: DB_PASSWORD
      containers:
      - name: poi-loader
        image: python:3.11-slim
        command:
        - sh
        - -c
        - |
          pip install --no-cache-dir asyncpg
          export DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
          python /scripts/load_pois.py
        env:
        - name: DB_USER
          value: "{{ .Values.postgresql.auth.username }}"
        - name: DB_HOST
          value: {{ include "ai-tourist.fullname" . | printf "%s-postgresql" | quote }}
        - name: DB_PORT
          value: {{ .Values.postgresql.port | quote }}
        - name: DB_NAME
          value: "{{ .Values.postgresql.auth.database }}"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "ai-tourist.fullname" . }}-secrets
              key: DB_PASSWORD
        volumeMounts:
        - name: loader-script
          mountPath: /scripts
        - name: poi-data
          mountPath: /data
      volumes:
      - name: loader-script
        configMap:
          name: {{ include "ai-tourist.fullname" . }}-poi-loader-script
      - name: poi-data
        configMap:
          name: {{ include "ai-tourist.fullname" . }}-poi-data
{{- end }}