apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init
  namespace: aitourist
data:
  init.sql: |
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";

    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        username VARCHAR(100) UNIQUE NOT NULL,
        email VARCHAR(255) UNIQUE NOT NULL,
        hashed_password VARCHAR(255) NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS user_profiles (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        preferences_embedding FLOAT[] NOT NULL,
        visit_history JSONB DEFAULT '[]'::jsonb,
        favorite_categories TEXT[] DEFAULT ARRAY[]::TEXT[],
        social_preference VARCHAR(20) DEFAULT 'solo',
        intensity_preference VARCHAR(20) DEFAULT 'moderate',
        coffee_breaks_preferred BOOLEAN DEFAULT true,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id)
    );

    CREATE TABLE IF NOT EXISTS poi (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        external_id VARCHAR(255) UNIQUE,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        category VARCHAR(100) NOT NULL,
        latitude DOUBLE PRECISION NOT NULL,
        longitude DOUBLE PRECISION NOT NULL,
        address TEXT,
        metadata JSONB DEFAULT '{}'::jsonb,
        embedding FLOAT[],
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS routes (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        name VARCHAR(255) NOT NULL,
        poi_ids UUID[] NOT NULL,
        total_distance_km DOUBLE PRECISION,
        estimated_duration_minutes INTEGER,
        explanation TEXT,
        metadata JSONB DEFAULT '{}'::jsonb,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
    );

    CREATE TABLE IF NOT EXISTS route_ratings (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        route_id UUID REFERENCES routes(id) ON DELETE CASCADE,
        user_id UUID REFERENCES users(id) ON DELETE CASCADE,
        rating INTEGER CHECK (rating >= 1 AND rating <= 5),
        comment TEXT,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(route_id, user_id)
    );

    CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON user_profiles(user_id);
    CREATE INDEX IF NOT EXISTS idx_poi_category ON poi(category);
    CREATE INDEX IF NOT EXISTS idx_poi_location ON poi(latitude, longitude);
    CREATE INDEX IF NOT EXISTS idx_routes_user_id ON routes(user_id);
    CREATE INDEX IF NOT EXISTS idx_routes_created_at ON routes(created_at DESC);
    CREATE INDEX IF NOT EXISTS idx_route_ratings_route_id ON route_ratings(route_id);
    CREATE INDEX IF NOT EXISTS idx_user_profiles_visit_history ON user_profiles USING GIN(visit_history);
    CREATE INDEX IF NOT EXISTS idx_poi_metadata ON poi USING GIN(metadata);
    CREATE INDEX IF NOT EXISTS idx_routes_metadata ON routes USING GIN(metadata);
    CREATE INDEX IF NOT EXISTS idx_poi_name_trgm ON poi USING GIN(name gin_trgm_ops);
    CREATE INDEX IF NOT EXISTS idx_poi_description_trgm ON poi USING GIN(description gin_trgm_ops);

    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = CURRENT_TIMESTAMP;
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    DROP TRIGGER IF EXISTS update_users_updated_at ON users;
    CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_user_profiles_updated_at ON user_profiles;
    CREATE TRIGGER update_user_profiles_updated_at BEFORE UPDATE ON user_profiles
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

    DROP TRIGGER IF EXISTS update_poi_updated_at ON poi;
    CREATE TRIGGER update_poi_updated_at BEFORE UPDATE ON poi
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();